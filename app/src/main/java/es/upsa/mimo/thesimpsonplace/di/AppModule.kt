package es.upsa.mimo.thesimpsonplace.di

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.preferencesDataStore
import androidx.room.Room
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import es.upsa.mimo.thesimpsonplace.data.TheSimpsonsDatabaseRoom
import es.upsa.mimo.thesimpsonplace.data.sources.service.CharacterDao
import es.upsa.mimo.thesimpsonplace.data.sources.service.EpisodeDao
import es.upsa.mimo.thesimpsonplace.data.sources.service.impl.CharacterDaoJson
import es.upsa.mimo.thesimpsonplace.data.sources.service.impl.EpisodeDaoJson
import javax.inject.Qualifier

import javax.inject.Singleton

// AppModule maneja repositorios, casos de uso y l√≥gica de negocio.
@Module // Para proporcionar las dependencias
@InstallIn(SingletonComponent::class)
object AppModule {
/**
 * üìå ¬øPor qu√© te funciona igual con o sin @Inject constructor?
 *
 * El motivo por el que tu c√≥digo funciona igual con o sin @Inject constructor es porque est√°s usando @Provides en el AppModule. Esto significa que Hilt no necesita inyectar autom√°ticamente las dependencias en tus clases, ya que t√∫ mismo las est√°s proporcionando manualmente en el m√≥dulo.
 *
 * üõ† Diferencia clave entre @Inject constructor y @Provides
 *
 * ‚úÖ Si usas @Provides en el m√≥dulo, no es necesario @Inject constructor en las clases porque ya est√°s dici√©ndole manualmente a Hilt c√≥mo crear cada instancia.
 *
 * ‚úÖ Si usas @Inject constructor en las clases, entonces no necesitas @Provides en el m√≥dulo (excepto si necesitas l√≥gica de inicializaci√≥n personalizada, como en CharacterDaoJson).
 *
 * üëâ ¬øCu√°ndo elegir una opci√≥n u otra?
 * 	‚Ä¢	Dejar @Provides en AppModule si en el futuro necesitas cambiar la implementaci√≥n f√°cilmente.
 * 	‚Ä¢	Eliminar @Provides y solo usar @Inject constructor si la implementaci√≥n no va a cambiar nunca y prefieres menos c√≥digo en AppModule.
 */

//   Ahora Hilt puede inyectarlos autom√°ticamente al detectar @Inject constructor() en sus clases.
    @Provides // Esto hace que Hilt nunca use @Inject constructor de CharacterDaoJson, porque ya le est√°s diciendo exactamente c√≥mo crear la instancia. Aqu√≠ Hilt sabe que cuando alguien necesite CharaterDao, debe proporcionar una instancia de CharaterDaoImpl. Al tener la eleccion de json de test o produccion, lo implementamos manualmente pasandole el @Provides y luego la eplciaicon de dentro
    // ¬øPORQUE @Provides? La implemenci√≥n de dicho Dao no tiene' @Inject constructor' (no es automatizada), debido a que quiero proveerlo (con @Provides) de forma m√°s manual al elegir yo si el dao de implementacio√≥n sea para json de test o producci√≥n cambiando el par√°metro recibido
    @Singleton // ‚úÖ Solo debe haber una instancia de CharacterDao en toda la app
    fun provideCharacterDao(@ApplicationContext context: Context): CharacterDao {
        val test = false // Cambia a `true` o 'false' para usar d elos json de test a producci√≥n

        return if (test) {
            CharacterDaoJson(context, "personajes_test.json", "imagenes_test.json")
        } else {
            CharacterDaoJson(context, "personajes_data.json", "imagenes_data.json")
        }
    }

    // CharacterDatabaDao --> DatabaseModule.kt

    @Provides
    @Singleton
    fun provideEpisodeDao(@ApplicationContext context: Context): EpisodeDao {
        val test = false

        return if(test) {
            EpisodeDaoJson(context, "episodios_test.json")
        }else {
            EpisodeDaoJson(context, "episodios_data.json")
        }

    }



// _________________________________________________
//    Le dice a Hilt c√≥mo proveer el DataStore<Preferences> cuando sea necesario en otra clase.
//    Como gameDataStore ya es una propiedad de extensi√≥n de Context, simplemente la usamos.
//    Hilt sabe qu√© DataStore<Preferences> usar gracias a la inyecci√≥n de dependencias basada en los tipos.
//    Sin embargo, en este caso, ambos m√©todos devuelven un DataStore<Preferences>, por lo que Hilt no puede diferenciar entre gameDataStore y userDataStore autom√°ticamente. Para solucionar esto, usamos calificadores (@Qualifier).

//  1Ô∏è‚É£ Definir los Qualifiers
//  Crea dos @Qualifier para identificar cada DataStore:
    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class GameDataStore

    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class UserDataStore

//  DataStore necesita acceso a un Context para funcionar.
//  Usar una propiedad de extensi√≥n garantiza que cualquier Context tenga acceso al mismo DataStore.
//  Le pasamos este DataStore por defecto a 'provideGamePreferencesDao'
    private val Context.gameDataStore: DataStore<Preferences> by preferencesDataStore(name = "game")
    private val Context.userDataStore: DataStore<Preferences> by preferencesDataStore(name = "user")

//  2Ô∏è‚É£ Aplicar los @Qualifier en los Proveedores (@Provides)
//  Ahora, en AppModule.kt, usa estas anotaciones para que Hilt sepa cu√°l es cu√°l:
    @Provides
    @Singleton
    @GameDataStore
    fun provideGameDataStore(@ApplicationContext context: Context): DataStore<Preferences> =
        context.gameDataStore

    @Provides
    @Singleton
    @UserDataStore
    fun provideUserDataStore(@ApplicationContext context: Context): DataStore<Preferences> =
        context.userDataStore

    // DE LA BASE DE DATOS
    @Provides
    @Singleton
    fun provideDatabaseRoom(@ApplicationContext context: Context): TheSimpsonsDatabaseRoom {
        return Room.databaseBuilder(
            context,
            TheSimpsonsDatabaseRoom::class.java,
            "the_simpsons_database"
        ).build()
    }


//    @Provides
//    @Singleton
//    fun provideGamePreferencesDao(gameDataStore: DataStore<Preferences>): GameDatastoreDaoImpl {
//        return GameDatastoreDaoImpl(gameDataStore)
//    }
// _________________________________________________

// EpisodeDatabaDao --> DatabaseModule.k

    // Por si quisiera cambiar de API seria aqui simplemente (si quiero pasarselo por par√°metro debo de cambiar mi implementaci√≥n de QuoteDaoApi()
//    ‚ùå Problema 2: 'provideQuoteDao' en AppModule es innecesario
//    üîç Causa: Ya lo est√°s proveyendo en 'NetworkModule.kt'. Elim√≠nalo de aqui AppModule.
//    @Provides
//    @Singleton
//    fun provideQuoteDao(): QuoteDao {
//        // XXXXX // Test
//        return QuoteDaoApi() // Producci√≥n
//    }

    // QuoteDatabaDao --> DatabaseModule.k

    // provideCharacterRepository  ¬øPORQUE No tiene @Provides y no esta declarada aqui? Debido a que CharaterRepositoryImpl es y va a ser la unica implementaci√≥n de la app (lo que pueden cambiar son sus daos, que son los que si se instancian aqui como 'provideCharacterDao'. Entonces esta implementaci√≥n si que tiene '@Inject constructor', para que se implemente automaticamente los parametros que se pasan (los daos). Ahora bien se tiene que enlazar la interfaz de 'CharaterRepository' con 'provideCharacterRepository' por ello hay que hacer a trav√©s de un '@Bind' una conexi√≥n en una clase abstracta.

//   Ahora Hilt puede inyectarlos autom√°ticamente al detectar '@Inject constructor()' en sus clases.
// üõë Alternativa (opcional): Si eliminas '@Provides' en AppModule, Hilt ya sabr√° c√≥mo inyectarlo autom√°ticamente gracias a '@Inject constructor'.
// ‚úÖ En este caso, Hilt sabr√° que cuando pida 'CharaterRepository', debe crear 'CharaterRepositoryImpl' autom√°ticamente.
// El problema es que Hilt no solo necesita saber c√≥mo construir 'CharaterRepositoryImpl', sino tambi√©n c√≥mo enlazarlo con la interfaz 'CharaterRepository', para ello usamos el @Bind a trav√©s deuna clase abtracta. Por ello se crea DomainModule

//    @Provides
//    fun provideCharacterRepository(dao: CharacterDao, databaseDao: CharacterDatabaseDao): CharaterRepository {
//        return CharaterRepositoryImpl(dao, databaseDao)
//    }

    // Casos de uso de Character...
//    @Provides
//    fun provideGetAllCharactersUseCase(repository: CharaterRepository): GetAllCharactersUseCase {
//        return GetAllCharactersUseCaseImpl(repository)
//    }

    // ...
}

